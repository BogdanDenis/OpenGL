#version 400 core

in vec3 Normal;
in vec3 fragPos;

out vec4 colour;

uniform vec3 viewPos;
uniform vec3 lightPos;
uniform vec3 objectColour;
uniform vec3 lightColour;

void main () {
	//Ambient
	float ambientStrength = 0.12f;
	vec3 ambient = ambientStrength * lightColour;

	//Diffuse
	vec3 norm = normalize (Normal);
	//gl_FrontFacing ? norm = norm : norm = -norm;
	vec3 lightDir = normalize (lightPos - fragPos);
	float diff = max (dot (norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColour;

	//Specular
	float specularStrength = 0.5f;
	vec3 viewDir = normalize (viewPos - fragPos);
	vec3 reflectDir = reflect (-lightDir, norm);
	float spec = pow (max (dot (viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColour;
	vec3 result = (ambient + diffuse + specular) * objectColour;
	colour = vec4 (result, 1.0f);
}