#version 430 core

layout (quads, equal_spacing, cw) in;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 model;

//out Data {
	out vec3 Normal;
	out vec3 fragPos;
	out float amp;
//} vdata[];


vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
					  0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
					 -0.577350269189626,  // -1.0 + 2.0 * C.x
					  0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float sumOctaves (int octaves, float x, float z, float persistence, float scale, float low, float high) {
	float maxAmp = 0.0;
	float amp = 1.0;
	float freq = scale;
	float noise = 0.0;
	for (int i = 0; i < octaves; i++) {
		noise += snoise (vec2 (x * freq, z * freq)) * amp;
		maxAmp += amp;
		amp *= persistence;
		freq *= 2;
	}
	noise /= maxAmp;
	noise = noise * (high - low) / 2 + (high + low) / 2;
	return noise;
}

float NoiseRidged (vec3 pos, int octaves, float lambda, float amp) {
	float sum = 0.0;
	for (int i = 0; i < octaves; i++) {
		float _amp = amp / pow (2, i);
		float _lam = lambda / pow (2, i);
		float add = snoise (vec2 (pos.x / _lam, pos.z / _lam)) * _amp;
		if (i > 1) {
			add *= 5 * sum;
		}
		sum += add;
	}
	return sum;
}

vec3 quadNorm (vec3 v1, vec3 v2, vec3 v3, vec3 v4) {
	vec3 a1 = v2 - v1;
	vec3 a2 = v4 - v3;
	return normalize (cross (a1, a2));
}

vec3 triNorm (vec3 v1, vec3 v2, vec3 v3) {
	vec3 v = v1 - v3;
	vec3 w = v2 - v3;
	return normalize (cross (v, w));
}

void main() {
	// Linear interpolation
	//vec3 c1, c2, c3, c4;
	//c1 = gl_in[0].gl_Position.xyz;
	//c2 = gl_in[1].gl_Position.xyz;
	//c3 = gl_in[2].gl_Position.xyz;
	//c4 = gl_in[3].gl_Position.xyz;
	vec4 p1 = mix (gl_in[0].gl_Position, gl_in[3].gl_Position, gl_TessCoord.x);
	vec4 p2 = mix (gl_in[1].gl_Position, gl_in[2].gl_Position, gl_TessCoord.x);
	vec4 pos = mix (p1, p2, gl_TessCoord.y);
	pos.w = 1.0;
	vec3 v2, v3, v4;
	v2.xz = v3.xz = v4.xz = pos.xz;
	v2.x += 1.5;
	v3.z += 1.5;
	v4.x += 1.5;
	v4.z += 1.5;
	float low;
	low = snoise (pos.xz * 0.00007);
	low *= 1500;

	
	pos.y = sumOctaves (12, pos.x, pos.z, 0.3, 0.0005, low, low + low / 2);
	v2.y = sumOctaves (10, v2.x, v2.z, 0.3, 0.0005, low, low + low / 2);
	v3.y = sumOctaves (10, v3.x, v3.z, 0.3, 0.0005, low, low + low / 2);
	v4.y = sumOctaves (10, v4.x, v4.z, 0.3, 0.0005, low, low + low / 2);
	Normal = normalize ((triNorm (v2, pos.xyz, v3) + triNorm (v3, v4, v2)) / 2);
	gl_Position = projection * view * model * pos;
	fragPos = (model * pos).xyz;
	amp = 100;
}