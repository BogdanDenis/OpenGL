#version 430 core

layout (vertices = 4) out;

uniform vec3 cameraPos;
uniform mat4 model;
uniform mat4 view_projection;
uniform float viewDist;


float max4 (float x1, float x2, float x3, float x4) {
	float max1 = max (x1, x2);
	float max2 = max (x3, x4);
	return max (max1, max2);
}

float min4 (float x1, float x2, float x3, float x4) {
	float min1 = min (x1, x2);
	float min2 = min (x3, x4);
	return min (min1, min2);
}

bool onScreen (vec3 centre, mat4 mvp) {
	vec4 Pclip = mvp * vec4(centre, 1.0);
	return abs(Pclip.x) < Pclip.w && 
		   abs(Pclip.y) < Pclip.w && 
		   0 < Pclip.z && 
		   Pclip.z < Pclip.w;
}

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
					  0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
					 -0.577350269189626,  // -1.0 + 2.0 * C.x
					  0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

float sumOctaves (int octaves, float x, float z, float persistence, float scale, float low, float high) {
	float maxAmp = 0.0;
	float amp = 1.0;
	float freq = scale;
	float noise = 0.0;
	for (int i = 0; i < octaves; i++) {
		noise += snoise (vec2 (x * freq, z * freq)) * amp;
		maxAmp += amp;
		amp *= persistence;
		freq *= 2;
	}
	noise /= maxAmp;
	noise = noise * (high - low) / 2 + (high + low) / 2;
	return noise;
}

int level (vec3 d1, vec3 d2, vec3 d3, vec3 d4, vec3 centre) {
	float low;
	float diam = distance (d1, d2);
	low = snoise (centre.xz * 0.00007);
	low *= 1500;
	d1.y = sumOctaves (8, d1.x, d1.z, 0.3, 0.0005, low, low + low / 2);
	d2.y = sumOctaves (8, d2.x, d2.z, 0.3, 0.0005, low, low + low / 2);
	d3.y = sumOctaves (8, d3.x, d3.z, 0.3, 0.0005, low, low + low / 2);
	d4.y = sumOctaves (8, d4.x, d4.z, 0.3, 0.0005, low, low + low / 2);
	centre.y = sumOctaves (8, centre.x, centre.z, 0.3, 0.0005, low, low + low / 2);

	float dist1, dist2, dist3, dist4;
	int level = 0;
	dist1 = distance (cameraPos, d1);
	dist2 = distance (cameraPos, d2); 
	dist3 = distance (cameraPos, d3); 
	dist4 = distance (cameraPos, d4); 
	float dist = min4 (dist1, dist2, dist3, dist4);
	if (dist > 1000)
		level = 2;
	else if (dist <= 1000 && dist > 400)
		level = 8;
	else if (dist <= 400 && dist > 200)
		level = 16;
	else if (dist <= 200 && dist > 100)
		level = 32;	
	else if (dist <= 100 && dist > 40)
		level = 64;
	else if (dist <= 40)
		level = 64;
	return level;
}

void main () {
	if (gl_InvocationID == 0) {
		
		vec3 d1, d2, d3, d4;
		d1 = gl_in[0].gl_Position.xyz;
		d2 = gl_in[1].gl_Position.xyz;
		d3 = gl_in[2].gl_Position.xyz;
		d4 = gl_in[3].gl_Position.xyz;

		vec3 centre = (d1 + d2 + d3 + d4) / 4;

		if (!onScreen (centre, view_projection * model)) {
			gl_TessLevelInner[0] = level (d1, d2, d3, d4, centre);
			gl_TessLevelInner[1] = level (d1, d2, d3, d4, centre);	
			gl_TessLevelOuter[0] = level (d1, d2, d3, d4, centre);
			gl_TessLevelOuter[1] = level (d1, d2, d3, d4, centre);
			gl_TessLevelOuter[2] = level (d1, d2, d3, d4, centre);
			gl_TessLevelOuter[3] = level (d1, d2, d3, d4, centre);
		}
		else {
			gl_TessLevelInner[0] = gl_TessLevelInner[1] = gl_TessLevelOuter[0] = 
			gl_TessLevelOuter[1] = gl_TessLevelOuter[2] = gl_TessLevelOuter[3] = 0;
		}
	}

	gl_out[gl_InvocationID].gl_Position =
		gl_in[gl_InvocationID].gl_Position;
}